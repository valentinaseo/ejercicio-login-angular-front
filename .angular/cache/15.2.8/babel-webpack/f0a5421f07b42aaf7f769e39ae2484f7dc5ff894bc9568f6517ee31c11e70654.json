{"ast":null,"code":"import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserservicesService {\n  constructor(http) {\n    this.http = http;\n    this.ApiUrl = \"http://localhost:3000/users\"; //Variable privada que conecta la API\n  }\n\n  login(email, password) {\n    const loginUrl = `${this.ApiUrl}/login`;\n    const formData = {\n      email: email,\n      password: password\n    };\n    this.http.post(loginUrl, formData, {\n      headers: this.getAuthHeaders()\n    }).subscribe(response => {\n      // this.authToken = response.accessToken;\n      localStorage.setItem(\"token\", response.token);\n      console.log(\"response: \", response);\n      this.userEmail = formData.email;\n    }, error => {\n      if (error instanceof HttpErrorResponse) {\n        if (error.error instanceof ErrorEvent) {\n          console.log(\"Error: \", error.error.message);\n        } else {\n          console.error(`codigo de error ${error.status}` + `mensaje: ${error.error}`);\n        }\n      }\n    });\n  }\n  create(username, email, password) {\n    const createUrl = `${this.ApiUrl}/create`;\n    const formData = {\n      username: username,\n      email: email,\n      password: password\n    };\n    this.http.post(createUrl, formData).subscribe(response => {\n      console.log(\"Registro exitoso. \", response);\n    }, error => {\n      console.log(\"Error: \", error);\n    });\n  }\n  getUser() {\n    const getUrl = `${this.ApiUrl}/${this.userEmail}`;\n    return this.http.get(getUrl);\n  }\n  updateUser(body) {\n    const updateUrl = `${this.ApiUrl}/update/${body._id}`;\n    const formData = body;\n    console.log(\"Usuario actualizado con éxito\", formData, updateUrl);\n    this.http.put(updateUrl, formData).subscribe(response => {\n      console.log(\"Usuario actualizado con éxito. \", response);\n    }, error => {\n      console.log(\"Error: \", error);\n    });\n  }\n  //Método para obtener la autorización del header\n  getAuthHeaders() {\n    const authToken = localStorage.getItem(\"token\");\n    const headers = new HttpHeaders({\n      \"Authorization\": `Bearer ${authToken}`\n    });\n    return headers;\n  }\n}\nUserservicesService.ɵfac = function UserservicesService_Factory(t) {\n  return new (t || UserservicesService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserservicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserservicesService,\n  factory: UserservicesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpErrorResponse","HttpHeaders","UserservicesService","constructor","http","login","email","password","loginUrl","ApiUrl","formData","post","headers","getAuthHeaders","subscribe","response","localStorage","setItem","token","console","log","userEmail","error","ErrorEvent","message","status","create","username","createUrl","getUser","getUrl","get","updateUser","body","updateUrl","_id","put","authToken","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\zarat\\OneDrive\\Documentos\\Valentina\\proyecto-pendiente-bootcamp-1\\Login-Angular-05-06-2023\\src\\app\\services\\userservices.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserservicesService {\r\n\r\n  private userEmail!:string;\r\n  private userData!:string;\r\n  private ApiUrl = \"http://localhost:3000/users\"; //Variable privada que conecta la API\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  login(email:string, password:string):void {\r\n    const loginUrl = `${this.ApiUrl}/login`\r\n    const formData = {\r\n      email: email,\r\n      password: password\r\n    }\r\n    this.http.post(loginUrl, formData, {headers:this.getAuthHeaders()})\r\n    .subscribe(\r\n      (response:any) => {\r\n        // this.authToken = response.accessToken;\r\n        localStorage.setItem(\"token\", response.token)\r\n        console.log(\"response: \", response);\r\n        this.userEmail = formData.email;\r\n      },\r\n      (error) => {\r\n        if(error instanceof HttpErrorResponse){\r\n          if(error.error instanceof ErrorEvent){\r\n            console.log(\"Error: \", error.error.message);\r\n          }\r\n        else {\r\n          console.error(`codigo de error ${error.status}` + `mensaje: ${error.error}`)\r\n        }\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  create(username:string,email:string,password:string):void{\r\n    const createUrl = `${this.ApiUrl}/create`\r\n    const formData = {\r\n      username: username,\r\n      email: email,\r\n      password: password\r\n    }\r\n    this.http.post(createUrl,formData)\r\n    .subscribe(\r\n      (response:any) => {\r\n        console.log(\"Registro exitoso. \", response);\r\n      },\r\n      (error) => {\r\n        console.log(\"Error: \", error);\r\n      }\r\n    )\r\n  }\r\n\r\n  getUser(){\r\n    const getUrl = `${this.ApiUrl}/${this.userEmail}`;\r\n    return this.http.get(getUrl);\r\n  }\r\n\r\n  updateUser(body:any){\r\n    const updateUrl = `${this.ApiUrl}/update/${body._id}`\r\n    const formData = body\r\n\r\n    console.log(\"Usuario actualizado con éxito\", formData, updateUrl);\r\n\r\n    this.http.put(updateUrl,formData)\r\n    .subscribe(\r\n      (response:any) => {\r\n        console.log(\"Usuario actualizado con éxito. \", response);\r\n      },\r\n      (error) => {\r\n        console.log(\"Error: \", error);\r\n      }\r\n    )\r\n  }\r\n\r\n  //Método para obtener la autorización del header\r\n  private getAuthHeaders():HttpHeaders{\r\n    const authToken = localStorage.getItem(\"token\");\r\n    const headers = new HttpHeaders({\"Authorization\":`Bearer ${authToken}`});\r\n    return headers;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}